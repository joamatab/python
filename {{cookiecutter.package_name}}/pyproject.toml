# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name="{{ cookiecutter.package_name }}"
description="{{ cookiecutter.package_description }}"
classifiers = [
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Operating System :: OS Independent",
]
version="{{ cookiecutter.package_version }}"
authors = [
    {name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}"},
]
keywords = ["python"]
license = {file = "LICENSE"}
dependencies = [
    "matplotlib",
]
readme = "README.md"
requires-python = ">=3.10"

[project.optional-dependencies]
dev = [
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest_regressions",
    ]
docs = [
    "jupytext",
    "matplotlib",
    "jupyter-book==1.0.0",
    ]


[tool.setuptools.packages]
find = {}

# [project.scripts]
# {{cookiecutter.package_name}} = "{{cookiecutter.package_name}}.cli:cli"


[tool.pytest.ini_options]
testpaths = ["{{cookiecutter.package_name}}/", "tests"]
# addopts = --tb=no
addopts = '--tb=short'
python_files = ["{{ cookiecutter.package_name }}/*.py", "notebooks/*.ipynb", "tests/*.py"]
norecursedirs = ["extra/*.py"]

[tool.mypy]
python_version = "3.11"
strict = true

[tool.pylsp-mypy]
enabled = true
live_mode = true
strict = true

[tool.setuptools.package-data]
mypkg = ["*.csv", "*.yaml"]

[tool.codespell]
ignore-words-list = "te, te/tm, te, ba, fpr, fpr_spacing, ro, nd, donot, schem"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff]
fix = true
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP"
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B905",  # `zip()` without an explicit `strict=` parameter
    "C408",  # C408 Unnecessary `dict` call (rewrite as a literal)
]

[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "0.0.1"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "README.md"

[[tool.tbump.file]]
src = "pyproject.toml"

[[tool.tbump.file]]
src = "{{ cookiecutter.package_name }}/__init__.py"

[[tool.tbump.before_commit]]
cmd = "git add CHANGELOG.md"
name = "create & check changelog"

[[tool.tbump.before_commit]]
cmd = "grep -q -F {new_version} CHANGELOG.md"
name = "create & check changelog"

